#!/usr/bin/env python3
"""
Get Full Function Definitions for SECURITY DEFINER Functions
This script gets the complete function definitions so we can recreate them without SECURITY DEFINER.
"""

import os
import psycopg2
from dotenv import load_dotenv

def main():
    # Load environment variables
    load_dotenv()
    
    # Get database URL
    db_url = os.getenv('DATABASE_URL') or os.getenv('DIRECT_DATABASE_URL')
    if not db_url:
        print('‚ùå ERROR: Neither DATABASE_URL nor DIRECT_DATABASE_URL found in environment')
        return
    
    try:
        # Connect to database
        print('üîó Connecting to database...')
        conn = psycopg2.connect(db_url)
        cursor = conn.cursor()
        
        print('üîç Getting full SECURITY DEFINER function definitions...\n')
        
        # Query for functions with SECURITY DEFINER and their full definitions
        function_query = """
        SELECT 
            n.nspname as schema_name,
            p.proname as function_name,
            pg_get_function_identity_arguments(p.oid) as arguments,
            pg_get_functiondef(p.oid) as function_definition
        FROM pg_proc p
        JOIN pg_namespace n ON p.pronamespace = n.oid
        WHERE n.nspname = 'public' 
        AND p.prosecdef = true
        ORDER BY p.proname;
        """
        
        cursor.execute(function_query)
        function_results = cursor.fetchall()
        
        if not function_results:
            print('‚úÖ No SECURITY DEFINER functions found')
            return
        
        print('üìã SECURITY DEFINER FUNCTIONS TO FIX:')
        print('=' * 80)
        
        fix_script = [
            '-- Fix Security Definer Functions - Complete Verified Script',
            '-- Generated by direct database query with full function definitions',
            '',
            '-- =============================================================================',
            '-- RECREATE FUNCTIONS WITHOUT SECURITY DEFINER',
            '-- =============================================================================',
            ''
        ]
        
        for row in function_results:
            schema, func_name, arguments, definition = row
            
            print(f'Function: {schema}.{func_name}({arguments or ""})')
            print('Full Definition:')
            print(definition)
            print('=' * 80)
            
            # Remove SECURITY DEFINER from the function definition
            lines = definition.split('\n')
            new_lines = []
            
            for line in lines:
                # Skip the SECURITY DEFINER line
                if 'SECURITY DEFINER' in line:
                    print(f'  ‚Üí Removing SECURITY DEFINER from {func_name}')
                    continue
                new_lines.append(line)
            
            # Add the fixed function to the script
            fix_script.extend([
                f'-- Fix {func_name} function - remove SECURITY DEFINER',
                f'DROP FUNCTION IF EXISTS public.{func_name}({arguments or ""}) CASCADE;',
                '',
                '-- Recreate without SECURITY DEFINER:',
                '\n'.join(new_lines),
                '',
                f'-- Grant execute permission to service_role',
                f'GRANT EXECUTE ON FUNCTION public.{func_name}({arguments or ""}) TO service_role;',
                '',
                '-- ' + '=' * 77,
                ''
            ])
        
        # Now add the view fixes
        print('\nüîç Getting view definitions for complete fix...')
        
        view_names = [
            'athletes_with_waiver_status',
            'booking_waiver_status', 
            'parents_with_waiver_status'
        ]
        
        view_query = """
        SELECT 
            schemaname,
            viewname,
            definition
        FROM pg_views 
        WHERE schemaname = 'public' 
        AND viewname = ANY(%s)
        ORDER BY viewname;
        """
        
        cursor.execute(view_query, (view_names,))
        view_results = cursor.fetchall()
        
        fix_script.extend([
            '',
            '-- =============================================================================',
            '-- RECREATE VIEWS (should now work without SECURITY DEFINER issues)',
            '-- =============================================================================',
            ''
        ])
        
        for row in view_results:
            schema, view_name, definition = row
            
            fix_script.extend([
                f'-- Recreate {view_name} view',
                f'DROP VIEW IF EXISTS public.{view_name} CASCADE;',
                '',
                f'CREATE VIEW public.{view_name} AS',
                definition + ';',
                '',
                f'GRANT SELECT ON public.{view_name} TO service_role;',
                ''
            ])
        
        # Add verification
        fix_script.extend([
            '-- =============================================================================',
            '-- VERIFICATION QUERIES',
            '-- =============================================================================',
            '',
            '-- Check that no SECURITY DEFINER functions remain:',
            '/*',
            'SELECT ',
            '    n.nspname as schema_name,',
            '    p.proname as function_name,',
            '    CASE p.prosecdef WHEN true THEN \'SECURITY DEFINER\' ELSE \'SECURITY INVOKER\' END as security_type',
            'FROM pg_proc p',
            'JOIN pg_namespace n ON p.pronamespace = n.oid',
            'WHERE n.nspname = \'public\' AND p.prosecdef = true;',
            '*/',
            '',
            '-- Check that views exist:',
            '/*',
            'SELECT schemaname, viewname FROM pg_views',
            'WHERE schemaname = \'public\'',
            'AND viewname IN (\'athletes_with_waiver_status\', \'booking_waiver_status\', \'parents_with_waiver_status\');',
            '*/'
        ])
        
        # Save the complete fix script
        script_filename = 'fix-all-security-definer-complete.sql'
        with open(script_filename, 'w') as f:
            f.write('\n'.join(fix_script))
        
        print(f'\nüíæ Complete fix script saved to: {script_filename}')
        
        # Print summary of what will be fixed
        print('\nüìù SUMMARY OF FIXES:')
        print('=' * 50)
        for row in function_results:
            schema, func_name, arguments, definition = row
            print(f'‚úÖ Function: {func_name}({arguments or ""}) - SECURITY DEFINER removed')
        
        for row in view_results:
            schema, view_name, definition = row
            print(f'‚úÖ View: {view_name} - will be recreated')
        
        cursor.close()
        conn.close()
        
        print(f'\nüéØ TOTAL: {len(function_results)} functions + {len(view_results)} views will be fixed')
        
    except Exception as e:
        print(f'‚ùå Error: {e}')
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()
