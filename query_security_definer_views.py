#!/usr/bin/env python3
"""
Query Database for Security Definer Views
This script queries the PostgreSQL database to get the exact definitions
of views that have SECURITY DEFINER property.
"""

import os
import psycopg2
from dotenv import load_dotenv

def main():
    # Load environment variables
    load_dotenv()
    
    # Get database URL
    db_url = os.getenv('DATABASE_URL') or os.getenv('DIRECT_DATABASE_URL')
    if not db_url:
        print('‚ùå ERROR: Neither DATABASE_URL nor DIRECT_DATABASE_URL found in environment')
        return
    
    try:
        # Connect to database
        print('üîó Connecting to database...')
        conn = psycopg2.connect(db_url)
        cursor = conn.cursor()
        
        # List of view names from the security linter
        view_names = [
            'athletes_with_waiver_status',
            'booking_waiver_status', 
            'parents_with_waiver_status'
        ]
        
        print('üîç Querying view definitions...\n')
        
        # Query to check if views exist and get their definitions
        view_query = """
        SELECT 
            schemaname,
            viewname,
            definition
        FROM pg_views 
        WHERE schemaname = 'public' 
        AND viewname = ANY(%s)
        ORDER BY viewname;
        """
        
        cursor.execute(view_query, (view_names,))
        view_results = cursor.fetchall()
        
        print('üìã CURRENT VIEW DEFINITIONS:')
        print('=' * 80)
        
        found_views = []
        view_definitions = {}
        
        for row in view_results:
            schema, view_name, definition = row
            found_views.append(view_name)
            view_definitions[view_name] = definition
            
            print(f'View: {schema}.{view_name}')
            print('Definition:')
            print(definition)
            print('-' * 80)
        
        # Check for missing views
        missing_views = set(view_names) - set(found_views)
        if missing_views:
            print(f'\n‚ö†Ô∏è  MISSING VIEWS: {missing_views}')
        
        # Now check for functions that might be used by these views with SECURITY DEFINER
        print('\nüîç CHECKING FOR SECURITY DEFINER FUNCTIONS USED BY VIEWS:')
        print('=' * 80)
        
        # Query for functions with SECURITY DEFINER
        function_query = """
        SELECT 
            n.nspname as schema_name,
            p.proname as function_name,
            pg_get_function_identity_arguments(p.oid) as arguments,
            pg_get_functiondef(p.oid) as function_definition,
            CASE p.prosecdef 
                WHEN true THEN 'SECURITY DEFINER'
                ELSE 'SECURITY INVOKER'
            END as security_type
        FROM pg_proc p
        JOIN pg_namespace n ON p.pronamespace = n.oid
        WHERE n.nspname = 'public' 
        AND p.prosecdef = true
        ORDER BY p.proname;
        """
        
        cursor.execute(function_query)
        function_results = cursor.fetchall()
        
        security_definer_functions = []
        
        if function_results:
            for row in function_results:
                schema, func_name, arguments, definition, security_type = row
                security_definer_functions.append(func_name)
                
                print(f'Function: {schema}.{func_name}({arguments or ""})')
                print(f'Security: {security_type}')
                print('Definition preview:')
                # Show first few lines of definition
                lines = definition.split('\n')[:5]
                for line in lines:
                    print(f'  {line}')
                if len(definition.split('\n')) > 5:
                    print('  ... (truncated)')
                print('-' * 40)
        else:
            print('‚úÖ No SECURITY DEFINER functions found')
        
        # Generate fix script
        print('\nüìù GENERATED FIX SCRIPT:')
        print('=' * 80)
        
        fix_script = [
            '-- Fix Security Definer Views - Database Verified',
            '-- Generated by direct database query',
            '',
            '-- =============================================================================',
            '-- REMOVE SECURITY DEFINER FROM VIEWS',
            '-- =============================================================================',
            ''
        ]
        
        # For each view, we need to drop and recreate without SECURITY DEFINER
        for view_name in found_views:
            definition = view_definitions[view_name]
            
            fix_script.extend([
                f'-- Fix {view_name} view',
                f'DROP VIEW IF EXISTS public.{view_name} CASCADE;',
                '',
                f'-- Recreate {view_name} without SECURITY DEFINER',
                f'CREATE VIEW public.{view_name} AS',
                definition,
                ''
            ])
        
        # For each SECURITY DEFINER function, remove the SECURITY DEFINER property
        if security_definer_functions:
            fix_script.extend([
                '-- =============================================================================',
                '-- REMOVE SECURITY DEFINER FROM FUNCTIONS',
                '-- =============================================================================',
                ''
            ])
            
            for func_name in security_definer_functions:
                # We need to recreate the function without SECURITY DEFINER
                # This is more complex and would require the full function definition
                fix_script.extend([
                    f'-- Note: Function {func_name} has SECURITY DEFINER',
                    f'-- This function needs to be recreated without SECURITY DEFINER property',
                    f'-- Use: CREATE OR REPLACE FUNCTION ... (without SECURITY DEFINER line)',
                    ''
                ])
        
        # Add permissions
        fix_script.extend([
            '-- =============================================================================',
            '-- GRANT PERMISSIONS',
            '-- =============================================================================',
            ''
        ])
        
        for view_name in found_views:
            fix_script.append(f'GRANT SELECT ON public.{view_name} TO service_role;')
        
        fix_script.extend([
            '',
            '-- =============================================================================',
            '-- VERIFICATION',
            '-- =============================================================================',
            '-- Run this query after applying fixes to verify:',
            '/*',
            'SELECT ',
            '    schemaname,',
            '    viewname',
            'FROM pg_views ',
            'WHERE schemaname = \'public\'',
            'AND viewname IN (\'athletes_with_waiver_status\', \'booking_waiver_status\', \'parents_with_waiver_status\');',
            '*/',
        ])
        
        # Print the fix script
        for line in fix_script:
            print(line)
        
        # Save the fix script to a file
        script_filename = 'fix-security-definer-views-verified.sql'
        with open(script_filename, 'w') as f:
            f.write('\n'.join(fix_script))
        
        print(f'\nüíæ Fix script saved to: {script_filename}')
        
        cursor.close()
        conn.close()
        
        print('\nüéØ SUMMARY:')
        print(f'  - Found {len(found_views)} of {len(view_names)} views')
        print(f'  - Found {len(security_definer_functions)} SECURITY DEFINER functions')
        print(f'  - Generated fix script with exact view definitions')
        
    except Exception as e:
        print(f'‚ùå Error: {e}')
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()
